const express = require('express')
const {
  Auth,
  Availability,
  Business,
  Account,
  Reports,
  Contacts,
  Conversations,
  Tags,
  ContactTags,
  Teammates,
  Keywords,
  Sequences,
  SequenceMessages,
  WhatsAppApi,
  Subscriptions,
  Broadcasts,
  Faqs,
  Mentions,
  GmailApi,
  ScheduledMessages,
  ContactRemarks,
  Webhook,
  AssignmentRules,
  Groups,
  GroupConversations,
  CustomFields
} = require('../controllers')
const middleware = require('../middleware')
const cors = require('cors')

const router = express.Router()

router.post('/auth/sign-out', middleware.auth, (req, res) => new Auth().signOut(req, res))
router.get('/auth/check', middleware.auth, (req, res) => new Auth().check(req, res))
router.put('/availability/switch', middleware.auth, (req, res) => new Availability().switch(req, res))
router.get('/availability', middleware.auth, (req, res) => new Availability().get((req, res)))
router.get('/business/name', middleware.auth, (req, res) => new Business().getName(req, res))
router.get('/account', middleware.auth, (req, res) => new Account().get(req, res))
router.patch('/account', middleware.auth, (req, res) => new Account().patch(req, res))
router.get('/subscribe/reply', middleware.auth, (req, res) => new Account().subscribeReply(req, res))
router.patch('/subscribe/reply', middleware.auth, (req, res) => new Account().subscribeReplyUpdate(req, res))
router.patch('/unsubscribe/reply', middleware.auth, (req, res) => new Account().unsubscribeReplyUpdate(req, res))
router.patch('/language/switch', middleware.auth, (req, res) => new Account().switchLanguage(req, res))
router.get('/reports/counters', middleware.auth, (req, res) => new Reports().counters(req, res))
router.get('/reports/weekly-conversations', middleware.auth, (req, res) => new Reports().weeklyConversations(req, res))
router.get('/contacts/with/last-conversation', middleware.auth, (req, res) => new Contacts().withLastConversation(req, res))
router.get('/contacts/with/last-conversation/search', middleware.auth, (req, res) => new Contacts().searchWithLastConversation(req, res))
router.get('/contact/:contactId/conversations', middleware.auth, (req, res) => new Conversations().get(req, res))
router.get('/contact/:contactId/conversations/search', middleware.auth, (req, res) => new Conversations().search(req, res))
router.get('/contact', middleware.auth, (req, res) => new Contacts().getOne(req, res))
router.put('/contact/tag', middleware.auth, (req, res) => new ContactTags().put(req, res))
router.get('/contact/tags', middleware.auth, (req, res) => new ContactTags().getAll(req, res))
router.delete('/contact/tag', middleware.auth, (req, res) => new ContactTags().delete(req, res))
router.get('/customer/tags', middleware.auth, (req, res) => new Tags().getAll(req, res))
router.get('/tags/contact/counts', middleware.auth, (req, res) => new Tags().withContactCounts(req, res))
router.delete('/tag/:tagId', middleware.auth, (req, res) => new Tags().delete(req, res))
router.get('/teammate', middleware.auth, (req, res) => new Teammates().getOne(req, res))
router.get('/keywords', middleware.auth, (req, res) => new Keywords().getAll(req, res))
router.delete('/keyword', middleware.auth, (req, res) => new Keywords().delete(req, res))
router.patch('/keyword/availability/switch', middleware.auth, (req, res) => new Keywords().switchAvailability(req, res))
router.get('/sequences', middleware.auth, (req, res) => new Sequences().getAll(req, res))
router.delete('/sequence', middleware.auth, (req, res) => new Sequences().delete(req, res))
router.patch('/sequence/availability/switch', middleware.auth, (req, res) => new Sequences().switchAvailability(req, res))
router.get('/sequence/messages', middleware.auth, (req, res) => new SequenceMessages().getAll(req, res))
router.delete('/sequence/message', middleware.auth, (req, res) => new SequenceMessages().delete(req, res))
router.patch('/sequence/message/availability/switch', middleware.auth, (req, res) => new SequenceMessages().switchAvailability(req, res))
router.get('/sequence', middleware.auth, (req, res) => new Sequences().get(req, res))
router.get('/teammates', middleware.auth, (req, res) => new Teammates().getAll(req, res))
router.patch('/teammate/availability/switch', middleware.auth, (req, res) => new Teammates().switchAvailability(req, res))
router.post('/keyword', middleware.auth, (req, res) => new Keywords().post(req, res))
router.patch('/keyword', middleware.auth, (req, res) => new Keywords().patch(req, res))
router.post('/sequence', middleware.auth, (req, res) => new Sequences().post(req, res))
router.patch('/sequence', middleware.auth, (req, res) => new Sequences().patch(req, res))
router.post('/sequence/message', middleware.auth, (req, res) => new SequenceMessages().post(req, res))
router.patch('/sequence/message', middleware.auth, (req, res) => new SequenceMessages().patch(req, res))
router.put('/teammate', middleware.auth, (req, res) => new Teammates().put(req, res))
router.patch('/teammate/:id', middleware.auth, (req, res) => new Teammates().patch(req, res))
router.delete('/teammate', middleware.auth, (req, res) => new Teammates().delete(req, res))
router.get('/whatsapp/logout', middleware.auth, (req, res) => new WhatsAppApi().logout(req, res))
router.get('/whatsapp/auth/check', middleware.auth, (req, res) => new WhatsAppApi().authCheck(req, res))
router.post('/whatsapp/takeover', middleware.auth, (req, res) => new WhatsAppApi().takeover(req, res))
router.get('/messages/queue', middleware.auth, (req, res) => new WhatsAppApi().getMessagesQueue(req, res))
router.post('/messages/queue', middleware.auth, (req, res) => new WhatsAppApi().clearMessagesQueue(req, res))
router.post('/whatsapp/re-sync', middleware.auth, (req, res) => new WhatsAppApi().retry(req, res))
router.get('/contact/subscriptions', middleware.auth, (req, res) => new Subscriptions().get(req, res))
router.put('/subscription', middleware.auth, (req, res) => new Subscriptions().put(req, res))
router.delete('/subscription', middleware.auth, (req, res) => new Subscriptions().delete(req, res))
router.get('/sequences/unsubscribed', middleware.auth, (req, res) => new Sequences().getUnsubscribed(req, res))
router.post('/broadcast', middleware.auth, (req, res) => new Broadcasts().post(req, res))
router.get('/broadcasts', middleware.auth, (req, res) => new Broadcasts().getAll(req, res))
router.delete('/broadcasts', middleware.auth, (req, res) => new Broadcasts().bulkDelete(req, res))
router.get('/contacts', middleware.auth, (req, res) => new Contacts().getAll(req, res))
router.get('/contacts/count', middleware.auth, (req, res) => new Contacts().count(req, res))
router.get('/contacts/search', middleware.auth, (req, res) => new Contacts().search(req, res))
router.patch('/contact', middleware.auth, (req, res) => new Contacts().patch(req, res))
router.post('/contacts', middleware.auth, (req, res) => new Contacts().post(req, res))
router.post('/contacts/export', middleware.auth, (req, res) => new Contacts().export(req, res))
router.get('/teammates/with/customer', middleware.auth, (req, res) => new Teammates().getAllWithCustomer(req, res))
router.patch('/contact/assign/teammate', middleware.auth, (req, res) => new Contacts().assignTeammate(req, res))
router.get('/faqs', middleware.auth, (req, res) => new Faqs().getAll(req, res))
router.get('/faqs/search', middleware.auth, (req, res) => new Faqs().search(req, res))
router.delete('/faq', middleware.auth, (req, res) => new Faqs().delete(req, res))
router.post('/faq', middleware.auth, (req, res) => new Faqs().post(req, res))
router.patch('/faq', middleware.auth, (req, res) => new Faqs().patch(req, res))
router.post('/conversation', middleware.auth, (req, res) => new Conversations().store(req, res))
router.post('/group/conversation', middleware.auth, (req, res) => new GroupConversations().store(req, res))
router.post('/conversation/send/location', middleware.auth, (req, res) => new Conversations().sendLocation(req, res))
router.post('/group/send/location', middleware.auth, (req, res) => new GroupConversations().sendLocation(req, res))
router.put('/mention', middleware.auth, (req, res) => new Mentions().store(req, res))
router.post('/conversation/send/voice', middleware.auth, (req, res) => new Conversations().sendVoice(req, res))
router.post('/conversation/send/image', middleware.auth, (req, res) => new Conversations().sendImage(req, res))
router.post('/conversation/send/file', middleware.auth, (req, res) => new Conversations().sendFile(req, res))
router.post('/conversation/start', middleware.auth, (req, res) => new Conversations().startNew(req, res))
router.post('/conversation/forward', middleware.auth, (req, res) => new Conversations().forward(req, res))
router.put('/contacts/tags', middleware.auth, (req, res) => new ContactTags().bulkInsert(req, res))
router.get('/contacts/archived/with/last-conversation', middleware.auth, (req, res) => new Contacts().archivedWithLastConversation(req, res))
router.get('/contact/:contactId/remarks', middleware.auth, (req, res) => new ContactRemarks().get(req, res))
router.post('/contact/remark', middleware.auth, (req, res) => new ContactRemarks().create(req, res))
router.post('/google-contact/sync', middleware.auth, (req, res) => new Contacts().googleContactsSync(req, res))
router.post('/contact/archive', middleware.auth, (req, res) => new Contacts().archive(req, res))
router.post('/contact/unarchive', middleware.auth, (req, res) => new Contacts().unarchive(req, res))
router.post('/contact/snooze', middleware.auth, (req, res) => new Contacts().snooze(req, res))
router.patch('/contact/block', middleware.auth, (req, res) => new Contacts().blockContact(req, res))
router.patch('/contact/unblock', middleware.auth, (req, res) => new Contacts().unblockContact(req, res))
router.patch('/contact/name', middleware.auth, (req, res) => new Contacts().updateName(req, res))
router.get('/contacts/assigned/with/last-conversation', middleware.auth, (req, res) => new Contacts().assignedWithLastConversation(req, res))
router.put('/conversation/internal', middleware.auth, (req, res) => new Conversations().internal().put(req, res))
router.get('/contacts/unread/with/last-conversation', middleware.auth, (req, res) => new Contacts().unreadWithLastConversation(req, res))
router.patch('/conversation/unread/read', middleware.auth, (req, res) => new Conversations().readAll(req, res))
router.patch('/group/conversation/unread/read', middleware.auth, (req, res) => new GroupConversations().readAll(req, res))
router.get('/contacts/mentioned/with/last-conversation', middleware.auth, (req, res) => new Contacts().mentionedWithLastConversation(req, res))
router.get('/contacts/ids', middleware.auth, (req, res) => new Contacts().getids(req, res))
router.post('/contact/share', middleware.auth, (req, res) => new Contacts().share(req, res))
router.post('/contact/mark-unread', middleware.auth, (req, res) => new Contacts().markAsUnread(req, res))
router.post('/contact/create', middleware.auth, (req, res) => new Contacts().create(req, res))
router.post('/contact/mark-read', middleware.auth, (req, res) => new Contacts().markAsRead(req, res))
router.delete('/contacts', middleware.auth, (req, res) => new Contacts().deleteAll(req, res))
router.patch('/account/password', middleware.auth, (req, res) => new Account().updatePassword(req, res))
router.get('/gmail/auth/check', middleware.auth, (req, res) => new GmailApi().authCheck(req, res))
router.get('/gmail/auth/url', middleware.auth, (req, res) => new GmailApi().authUrl(req, res))
router.put('/gmail/token', middleware.auth, (req, res) => new GmailApi().token().update(req, res))
router.get('/schedule/messages/contact/:contactId', middleware.auth, (req, res) => new ScheduledMessages().get(req, res))
router.post('/scheduled/message', middleware.auth, (req, res) => new ScheduledMessages().create(req, res))
router.post('/assignment/rules', middleware.auth, (req, res) => new AssignmentRules().create(req, res))
router.get('/assignment/rules', middleware.auth, (req, res) => new AssignmentRules().index(req, res))
router.patch('/assignment/rules/:assignmentRuleId', middleware.auth, (req, res) => new AssignmentRules().update(req, res))
router.delete('/assignment/rules/:assignmentRuleId', middleware.auth, (req, res) => new AssignmentRules().delete(req, res))
router.patch('/assignment/rules/availability/switch/:assignmentRuleId', middleware.auth, (req, res) => new AssignmentRules().switchAvailability(req, res))
router.get('/group/:groupId', middleware.auth, (req, res) => new Groups().get(req, res))
router.get('/group/:groupId/conversations', middleware.auth, (req, res) => new GroupConversations().get(req, res))
router.get('/group/:groupId/conversations/search', middleware.auth, (req, res) => new GroupConversations().search(req, res))
router.get('/group/:groupId/participants', middleware.auth, (req, res) => new Groups().participants(req, res))
router.post('/group/send/image', middleware.auth, (req, res) => new GroupConversations().sendImage(req, res))
router.post('/group/send/file', middleware.auth, (req, res) => new GroupConversations().sendFile(req, res))
router.post('/group/send/voice', middleware.auth, (req, res) => new GroupConversations().sendVoice(req, res))
router.post('/group/contact/share', middleware.auth, (req, res) => new GroupConversations().share(req, res))
router.patch('/group/name', middleware.auth, (req, res) => new Groups().updateName(req, res))
router.post('/auth/sign-in', (req, res) => new Auth().signIn(req, res))
router.post('/webhook/whatsapp/:instanceId', cors({ origin: '*' }), (req, res) => new Webhook().post(req, res))
router.get('/contact/custom-fields', middleware.auth, (req, res) => new CustomFields().get(req, res))
router.get('/custom-fields/fields', middleware.auth, (req, res) => new CustomFields().getAllFields(req, res))

module.exports = router
